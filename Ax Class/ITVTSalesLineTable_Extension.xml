<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ITVTSalesLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tablestr(SalesLine))]
final class ITVTSalesLineTable_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itvtFindLastRelatedSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// It finds a last related rental line by the inventory transaction id
    /// </summary>
    /// <param name = "_salesLineOriginTransId">The inventory transaction id</param>
    /// <param name = "_forUpdate">The selection for the update</param>
    /// <returns>The selected record</returns>
    public static SalesLine itvtFindLastRelatedSalesLine(InventTransId _salesLineOriginTransId, boolean _forUpdate = false)
    {
        SalesLine ret;

        ret.selectForUpdate(_forUpdate);

        select firstonly ret
            order by ret.LineNum desc
            where ret.ITVTOriginInventTransId == _salesLineOriginTransId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable, boolean _resetPrice, SalesAgreementHeaderRefRecId _matchingAgreement, boolean _performVariantValidation)
    {
        next initFromInventTable(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);
        if (this.rentalDimensionIsActive()
            && ITVTRentalParameters::getInventDimDefaultValue(this.TableId))
        {
            InventDim inventDim = ITVTRentalParameters::setRentalInventDimDefault(this.inventDim(), this.TableId);
            this.InventDimId = inventDim.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    public container itemIdChanged(boolean _resetPrice, AgreementHeaderRecId _matchingAgreement, boolean _performProductVariantValidation)
    {
        SalesLineItemIdModifiedDTO  salesLineItemIdModifiedDTO = SalesLineItemIdModifiedDTO::construct();
        container                   salesLineModified;

        salesLineModified = next itemIdChanged(_resetPrice, _matchingAgreement, _performProductVariantValidation);
        
        salesLineItemIdModifiedDTO.unpack(salesLineModified);
        
        if (this.inventTable().ITVTIsRentalItem)
        {
            if (this.rentalDimensionIsActive()
                && ITVTRentalParameters::getInventDimDefaultValue(this.TableId))
            {
                InventDim inventDim = ITVTRentalParameters::setRentalInventDimDefault(this.inventDim(), this.TableId);
                this.InventDimId = inventDim.InventDimId;
            }

            if (this.salesTable().ITVTIsRental == NoYes::Yes)
            {
				warning("@ITVTRental:SalesLineRentalItemWarning");
            }
        }

        return salesLineItemIdModifiedDTO.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId  _fieldId)
    {
        boolean     ok = next validateField(_fieldId);
        
        if (_fieldId == fieldNum(SalesLine, ItemId))
        {
            if (this.inventTable().ITVTIsRentalItem && this.salesTable().ITVTIsRental)
            {
                info("@ITVTRental:SalesLineRentalItemWarning");
                // Code disabled based on customer's requirement 16.9.2021:
                /*
                if (!this.validateRentalDimension())
                {
                    EcoResProductDimGroupSetup productDimSetup = EcoResProductDimGroupSetup::newItemId(this.ItemId);
                    InventDim inventDim = ITVTRentalParameters::setRentalInventDimDefault(this.inventDim(), this.TableId);
                    ok = checkFailed(strFmt("@SYS73899", inventDim.preFixProductDim(productDimSetup), this.ItemId));
                }
				*/
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRentalDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that Rental dimension could be applied for current Item
    /// </summary>
    /// <returns>true if Rental dimension could be applied, otherwise false</returns>
    public boolean validateRentalDimension()
    {
        boolean ret = true;

        if (this.rentalDimensionIsActive()
            && ITVTRentalParameters::getInventDimDefaultValue(this.TableId))
        {
            InventDim   inventDim = ITVTRentalParameters::setRentalInventDimDefault(this.inventDim(), this.TableId);

            if (!InventDimCombination::existByInventDim(this.ItemId, inventDim))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalDimensionIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether Rental dimension from Rental parameters is active for Item
    /// </summary>
    /// <returns>true if Rental dimension is active, otherwise false</returns>
    public boolean rentalDimensionIsActive()
    {
        return this.ItemId && ITVTRentalParameters::rentalInventDimFieldActiveForItem(this.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>