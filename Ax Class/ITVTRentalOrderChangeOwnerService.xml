<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ITVTRentalOrderChangeOwnerService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This operation creates associated inventory transactions and a fixed asset from posted inventory transactions 
/// </summary>
/// <remarks>
/// The created inventory transaction should have an IsFixedAsset item and the current company as an InventOwner
/// </remarks>
class ITVTRentalOrderChangeOwnerService extends SysOperationServiceBase
{
    private     LedgerDimensionBase     changeOwnerAccount;
    private     InventJournalId         inventoryToFixedAssetInventJournalId;
    protected   AssetTable              createdAssetTable;
    private     InventTransId           inventoryToFixedAssetInventTransId;
    private     Amount                  inventoryToFixedAssetInventCostPrice;
    private     AssetParameters         assetParameters;
    private     ITVTRentalParameters    rentalParameters;
    private		TransDate               postingDate;
    private     InventTrans             inventTrans;
    private     InventTransOrigin       inventTransOrigin;
    protected   ITVTRentalLine          rentalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeRentalOrderOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// The operation's entry point
    /// </summary>
    /// <param name = "_contract">The operation's contract</param>
    public void changeRentalOrderOwner(ITVTRentalOrderChangeOwnerContract _contract)
    {
        assetParameters		= AssetParameters::find();
        rentalParameters	= ITVTRentalParameters::find();
        postingDate			= _contract.parmPostingDate();

        inventTrans = InventTrans::findRecId(_contract.parmInventTransRecId());
        inventTransOrigin = inventTrans.inventTransOrigin();
        rentalLine = ITVTRentalLine::findInventTransId(inventTransOrigin.InventTransId);

        if (!inventTrans.inventTable().ITVTIsFixedAsset
            || ITVTRentalParameters::getRentalInventDimStatus(inventTrans.inventDim()) != rentalParameters.InventDimValueStatusNew
           )
        {
            return;
        }

        ttsbegin;

        this.preUpdateInventTrans();

        this.changeRentalOrderOwnerFixedAsset();

        this.postUpdateInventTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRentalOrderOwnerFixedAsset</Name>
				<Source><![CDATA[
    private void changeRentalOrderOwnerFixedAsset()
    {
        if (rentalParameters.CreateFixedAssetWithFirstRental)
        {
            this.createFixedAsset();
            this.createPostInventoryToFixedAssetJournal();

            TransTxt    fixedAssetJournalLineTxt = inventTrans.inventTable().NameAlias;
        }

        this.createPostInventTransMovFixedAssetJournal(!rentalParameters.CreateFixedAssetWithFirstRental);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateInventTrans</Name>
				<Source><![CDATA[
    protected void preUpdateInventTrans()
    {
        // Remove Reservation
        if (inventTrans.StatusIssue == StatusIssue::ReservPhysical
            || inventTrans.StatusIssue == StatusIssue::ReservOrdered)
        {
            // Remove reservation so Journal can make the physical reservation
            InventDimParm inventDimParmReserve;
            inventDimParmReserve.setAllInventDim();
            InventUpd_Reservation updReservation = InventUpd_Reservation::newInventDim(inventTrans.inventMovement(), inventTrans.inventDim(), -inventTrans.Qty);
            updReservation.parmInventDimParm(inventDimParmReserve);
            updReservation.parmAllowAutoReserveDim(false); // don't reserve to something else.
            updReservation.updateNow();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Used flag for the specific inventory transaction
    /// </summary>
    /// <param name = "_inventTransRecId">The inventory transaction RecId</param>
    protected void postUpdateInventTrans()
    {
        InventTrans inventTransUpdate;

        select firstonly forupdate inventTransUpdate
            where inventTransUpdate.RecId == inventTrans.RecId
               && inventTransUpdate.ITVTRentalInventTransUsed == ITVTRentalInventTransUsedEnum::New;

        if (inventTransUpdate.RecId)
        {
            inventTransUpdate.ITVTRentalInventTransUsed = ITVTRentalInventTransUsedEnum::Used;
            inventTransUpdate.update();
        }

        
        // Update Dimension
        inventTrans.reread();
        InventDim inventDim = inventTrans.inventDim();
        InventDim inventDimNew = ITVTRentalParameters::setRentalInventDimStatus(inventDim,rentalParameters.InventDimValueStatusNewFixedAsset);
        InventUpd_ChangeDimension changeDimension = InventUpd_ChangeDimension::newParameters(inventTrans.inventMovement(true), inventDim, inventDim.toDimParm(), inventDimNew, inventTrans.Qty);
        changeDimension.updateNow();
        
        // Restore Reservation
        inventTrans.reread();
        InventDimParm inventDimParmReserve;
        inventDimParmReserve.setAllInventDim();
        InventUpd_Reservation updReservation = InventUpd_Reservation::newInventDim(inventTrans.inventMovement(), inventTrans.inventDim(), inventTrans.Qty);
        updReservation.parmInventDimParm(inventDimParmReserve);
        updReservation.parmAllowAutoReserveDim(false); // don't reserve to something else.
        updReservation.updateNow();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFixedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates the fixed asset
    /// </summary>
    /// <param name = "_inventTrans">The <c>InventTrans</c> record which is used for the fixed asset creation</param>
    protected void createFixedAsset()
    {
        InventTable     inventTransInventTable = inventTrans.inventTable();

        createdAssetTable.clear();
        this.initAssetTable(inventTransInventTable);
        createdAssetTable.insert();

        this.setInventFixedAssetFields(createdAssetTable.AssetId, inventTransInventTable);

        inventTransInventTable.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetTable</Name>
				<Source><![CDATA[
    protected void initAssetTable(InventTable _inventTransInventTable)
    {
        createdAssetTable.AssetGroup               = ITVTRentalItemAssetGroup::findByInventTable(_inventTransInventTable).AssetGroupId;
        createdAssetTable.modifiedField(fieldNum(AssetTable, AssetGroup));
        createdAssetTable.AssetId                  = NumberSeq::newGetNumFromId(createdAssetTable.assetGroup().AutoNumberSequenceTable).num();
        createdAssetTable.Name                     = _inventTransInventTable.NameAlias;
        createdAssetTable.modifiedField(fieldNum(AssetTable, Name));
        createdAssetTable.Quantity                 = -inventTrans.Qty;
        createdAssetTable.UnitOfMeasure            = InventTableModule::find(inventTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
        createdAssetTable.SerialNum                = inventTrans.inventDim().inventSerialId;
        createdAssetTable.ITVTItemId			   = inventTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventFixedAssetFields</Name>
				<Source><![CDATA[
    protected void setInventFixedAssetFields(AssetId _assetId, InventTable _inventTable)
    {
        InventTable         inventTableForUpdate = _inventTable;

        inventTableForUpdate.selectForUpdate(true);

        inventTableForUpdate.ITVTFixedAssetHGBSL    = AssetBook::find(_assetId, assetParameters.BookIdDefault).ServiceLife;
        inventTableForUpdate.ITVTFixedAssetIFRSSL   = AssetBook::find(_assetId, assetParameters.BookIdDefault).ServiceLife;

        inventTableForUpdate.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostInventTransMovFixedAssetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a <c>InventTrans</c> by using of inventory movement journal's creation
    /// </summary>
    /// <param name = "_inventTransOrigin">An origin inventory transaction (is used when we are creating the journal)</param>
    /// <returns>The created inventory movement journal's transaction</returns>
    protected void createPostInventTransMovFixedAssetJournal(boolean _postIssue)
    {
        InventJournalName       inventJournalTableName = InventJournalName::find(rentalParameters.MovementJournalNameId);
        InventJournalTableData  inventJournalTableData = this.createInventJournalTable(inventJournalTableName);
        InventJournalTable      inventJournalTable = inventJournalTableData.journalTable();


        // Negative Line
        if (_postIssue)
        {
            InventJournalTrans inventJournalTrans = this.createInventJournalTrans(  inventJournalTableData,
                                                                                inventTrans, inventTrans.Qty,
                                                                                inventTrans.inventDim(),
                                                                                null,  // InventDimTo
                                                                                true, // SetPrice
                                                                                true,  // SetLedgerDimension
                                                                                false  // InitAsset
                                                                                );

        }


        // Positive Line
        InventDim inventDim = ITVTRentalParameters::setRentalInventDimStatus(inventTrans.inventDim(), rentalParameters.InventDimValueStatusNewFixedAsset);
        InventJournalTrans inventJournalTrans = this.createInventJournalTrans(  inventJournalTableData,
                                                                                inventTrans, -inventTrans.Qty,
                                                                                inventDim, 
                                                                                null,  // InventDimTo
                                                                                false, // SetPrice
                                                                                true,  // SetLedgerDimension
                                                                                false  // InitAsset 
                                                                                );

        if (createdAssetTable.RecId)
        {
            createdAssetTable.ITVTAssetInventTransId   = inventJournalTrans.InventTransId;
            createdAssetTable.update();
        }

        this.postInventJournal(inventJournalTable);

        inventJournalTable.reread();

		if (!inventJournalTable.Posted)
        {
            throw error("@SYS69433");
        }
		
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventJournal</Name>
				<Source><![CDATA[
    private void postInventJournal(InventJournalTable _inventJournalTable)
    {
        JournalCheckPost inventJournalPost = InventJournalCheckPost::construct(_inventJournalTable);

        inventJournalPost.parmJournalId(_inventJournalTable.JournalId);
        inventJournalPost.parmJournalTableId(_inventJournalTable.TableId);
        inventJournalPost.parmTransferErrors(false);
        inventJournalPost.parmJournalCheckPostType(JournalCheckPostType::Post);
        inventJournalPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTable</Name>
				<Source><![CDATA[
    private InventJournalTableData createInventJournalTable(InventJournalName _journalName)
    {
        InventJournalTable      inventJournalTable;
        InventJournalTableData  inventJournalTableData = JournalTableData::newTable(inventJournalTable);

        if (inventJournalTableData)
        {
            inventJournalTableData.initFromJournalName(_journalName);
        }

        inventJournalTable.Description = strFmt("%1",inventTransOrigin.ReferenceId); // SalesId

        inventJournalTable.insert();

        return inventJournalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTrans</Name>
				<Source><![CDATA[
    private InventJournalTrans createInventJournalTrans(
        InventJournalTableData  _inventJournalTableData,
        InventTrans             _inventTrans,
        Qty                     _journalTransQty,
        InventDim               _inventDim,
        InventDim               _inventDimTo = null,
        boolean                 _setCostPrice = true,
        boolean                 _setLedgerDimension = true,
        boolean                 _initAsset = false
        )
    {
        InventJournalTrans inventJournalTrans;
        inventJournalTrans.initValue();

        InventJournalTransData  inventJournalTransData = new InventJournalTransData(inventJournalTrans, _inventJournalTableData);

        inventJournalTransData.initFromJournalTable();
        inventJournalTransData.parmLastLineNum(InventJournalTrans::lastLineNum(inventJournalTransData.journalTableData().journalTable().JournalId));
        inventJournalTrans.initFromInventTable(_inventTrans.inventTable());
        inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, ItemId));
        inventJournalTrans.TransDate = postingDate;

        inventJournalTrans.InventDimId = _inventDim.inventDimId;
        inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, InventDimId));
        
        if (_inventDimTo)
        {
            inventJournalTrans.ToInventDimId = _inventDimTo.inventDimId;
            inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, ToInventDimId));
        }

        if (!_setCostPrice)
        {
            inventJournalTrans.CostPrice = 0;
            inventJournalTrans.PriceUnit = InventTableModule::find(_inventTrans.ItemId, ModuleInventPurchSales::Invent).PriceUnit;
        }
        
        inventJournalTrans.Qty = _journalTransQty;
        inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, Qty));

        if (_setCostPrice)
        {
            inventJournalTrans.setCostPrice(
                _inventTrans.inventDimId,
                _inventTrans.inventDim(),
                InventTableModule::find(_inventTrans.ItemId, ModuleInventPurchSales::Invent));
        }

        if (_setLedgerDimension && rentalParameters.MovementJournalLedgerDimension)
        {
            inventJournalTrans.LedgerDimension = rentalParameters.MovementJournalLedgerDimension;
        }

        inventJournalTrans.DefaultDimension = rentalLine.DefaultDimension;
        
        if (_initAsset)
        {
            inventJournalTrans.AssetId = createdAssetTable.AssetId;
            inventJournalTrans.AssetBookId = AssetBook::find(createdAssetTable.AssetId, assetParameters.BookIdDefault).BookId;
            inventJournalTrans.AssetTransType = AssetTransTypeJournal::Acquisition;
        }

        inventJournalTransData.create();

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostInventoryToFixedAssetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a <c>InventTrans</c> by using of inventory to fixed asset journal's creation
    /// </summary>
    /// <param name = "_inventTransOrigin">An origin inventory transaction (is used when we are creating the journal)</param>
    /// <returns>The created inventory to fixed asset journal's transaction</returns>
    protected void createPostInventoryToFixedAssetJournal()
    {
        ITVTRentalParameters	itvtRentalParameters = ITVTRentalParameters::find();
        InventJournalName       inventJournalTableName = InventJournalName::find(itvtRentalParameters.InventJournalNameId);

        InventJournalTableData  inventJournalTableData = this.createInventJournalTable(inventJournalTableName);
        InventJournalTable      inventJournalTable = inventJournalTableData.journalTable();

        InventJournalTrans      inventJournalTrans = this.createInventJournalTrans( inventJournalTableData,
                                                                                    inventTrans, -inventTrans.Qty,
                                                                                    inventTrans.inventDim(), null,
                                                                                    true, false, true);

        this.postInventJournal(inventJournalTable);

        inventJournalTable.reread();

        if (!inventJournalTable.Posted)
        {
            throw error("@SYS69433");
        }
		
        inventoryToFixedAssetInventTransId   = inventJournalTrans.InventTransId;
        inventoryToFixedAssetInventCostPrice = inventJournalTrans.CostPrice;

    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
	/// <summary>
    /// It returns the service operation name
    /// </summary>
    /// <returns>the service operation name</returns>
    public Name name()
    {
        return "@ITVTRental:ChangeOwner";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ChangeOwnerNewFixedAsset</Name>
				<Source><![CDATA[
    public static void ChangeOwnerNewFixedAsset(InventTrans _inventTrans, TransDate _postingDate)
    {
        ITVTRentalOrderChangeOwnerContract contract = new ITVTRentalOrderChangeOwnerContract();
        contract.parmPostingDate(_postingDate);
        contract.parmInventTransRecId(_inventTrans.RecId);

        ITVTRentalOrderChangeOwnerService service = new ITVTRentalOrderChangeOwnerService();
        service.changeRentalOrderOwner(contract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>