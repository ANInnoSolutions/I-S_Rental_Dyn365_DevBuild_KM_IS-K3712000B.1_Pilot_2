<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ITVTPurchPackingSlipJournalPost_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class extension for <c>PurchPackingSlipJournalPost</c>
/// </summary>
[ExtensionOf(classStr(PurchPackingSlipJournalPost))]
final class ITVTPurchPackingSlipJournalPost_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustCreateInventoryAdjustment</Name>
				<Source><![CDATA[
    private boolean mustCreateInventoryAdjustment()
    {
        return purchLine.ITVTPostRentalItem == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryAdjustment</Name>
				<Source><![CDATA[
    private InventTrans createInventoryAdjustment()
    {
        InventTrans ret;

        ITVTRentalParameters    rentalParameters = ITVTRentalParameters::find();
        InventJournalName       inventJournalTableName = InventJournalName::find(rentalParameters.LossProfitJournalNameId);

        InventJournalTableData  inventJournalTableData = this.createInventJournalTable(inventJournalTableName);
        InventJournalTable      inventJournalTable = inventJournalTableData.journalTable();

        InventJournalTrans      inventJournalTrans = this.createInventJournalTrans(inventJournalTableData);

        this.postInventJournal(inventJournalTable);

        inventJournalTable.reread();

        if (!inventJournalTable.Posted)
        {
            throw error("@SYS69433");
        }
  
        ret = InventTrans::findTransId(inventJournalTrans.InventTransId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventJournal</Name>
				<Source><![CDATA[
    private void postInventJournal(InventJournalTable _inventJournalTable)
    {
        JournalCheckPost inventJournalPost = InventJournalCheckPost::construct(_inventJournalTable);

        inventJournalPost.parmJournalId(_inventJournalTable.JournalId);
        inventJournalPost.parmJournalTableId(_inventJournalTable.TableId);
        inventJournalPost.parmTransferErrors(false);
        inventJournalPost.parmJournalCheckPostType(JournalCheckPostType::Post);
        inventJournalPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTable</Name>
				<Source><![CDATA[
    private InventJournalTableData createInventJournalTable(InventJournalName _journalName)
    {
        InventJournalTable      inventJournalTable;
        InventJournalTableData  inventJournalTableData = JournalTableData::newTable(inventJournalTable);

        if (inventJournalTableData)
        {
            inventJournalTableData.initFromJournalName(_journalName);
        }

        inventJournalTable.Description = purchLine.PurchId;
        inventJournalTable.insert();

        return inventJournalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTrans</Name>
				<Source><![CDATA[
    private InventJournalTrans createInventJournalTrans(InventJournalTableData  _inventJournalTableData)
    {
        InventJournalTrans inventJournalTrans;
        inventJournalTrans.initValue();

        InventJournalTransData  inventJournalTransData = new InventJournalTransData(inventJournalTrans, _inventJournalTableData);

        inventJournalTransData.initFromJournalTable();
        inventJournalTransData.parmLastLineNum(InventJournalTrans::lastLineNum(inventJournalTransData.journalTableData().journalTable().JournalId));
        inventJournalTrans.initFromInventTable(purchLine.inventTable());
        inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, ItemId));
        inventJournalTrans.TransDate = purchParmTable.TransDate;

        InventDim inventDim = InventDim::find(purchLine.InventDimId);
        inventDim = ITVTRentalParameters::setRentalInventDimStatus(inventDim, purchLine.ITVTToRentalStatus); 

        inventJournalTrans.InventDimId = inventDim.inventDimId;
        inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, InventDimId));

        inventJournalTrans.CostPrice = 0;
        
        inventJournalTrans.Qty = purchLine.PurchQty;
        inventJournalTrans.modifiedField(fieldNum(InventJournalTrans, Qty));
        
        inventJournalTrans.PriceUnit = InventTableModule::find(purchLine.ItemId, ModuleInventPurchSales::Invent).PriceUnit;

        inventJournalTransData.create();

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLineBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create inventory adjustment journal and update asset fields
    /// </summary>
    protected void updateSourceLineBeforePosting()
    {
        InventTrans inventTrans;

        if (this.mustCreateInventoryAdjustment())
        {
            inventTrans = this.createInventoryAdjustment();
        }

        next updateSourceLineBeforePosting();

        if (inventTrans)
        {
            this.updateAssetTable(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetTable</Name>
				<Source><![CDATA[
    private void updateAssetTable(InventTrans _inventTrans)
    {
        PurchParmLine_Asset purchParmLine_Asset = purchParmLine.purchParmLine_Asset();

        AssetTable assetTable = AssetTable::find(purchParmLine_Asset.AssetId, true);

        assetTable.Quantity = _inventTrans.Qty;
        assetTable.ITVTAssetInventTransId = _inventTrans.inventTransOrigin().InventTransId;
        assetTable.UnitOfMeasure = InventJournalTrans::findInventTransId(assetTable.ITVTAssetInventTransId).Unit;
        assetTable.ITVTItemId = _inventTrans.ItemId;

        assetTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventBlocking</Name>
				<Source><![CDATA[
    private void createInventBlocking()
    {
        InventBlocking inventBlocking;

        select forupdate inventBlocking
            where inventBlocking.ITVTInventTransId == purchParmLine.InventTransId;

        if (inventBlocking.RecId)
        {
            inventBlocking.Qty += purchParmLine.ReceiveNow;

            inventBlocking.update();
        }
        else
        {
            inventBlocking.ItemId = purchParmLine.ItemId;
            inventBlocking.BlockingType = InventBlockingType::Manual;
            inventBlocking.Description = purchParmTable.PurchId;
            inventBlocking.ExpectedReceiptDate = purchParmTable.TransDate;
            inventBlocking.Qty = purchParmLine.ReceiveNow;
            inventBlocking.InventDimId = purchParmLine.InventDimId;
            inventBlocking.ITVTInventTransId = purchParmLine.InventTransId;

            inventBlocking.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSingleLine</Name>
				<Source><![CDATA[
    protected void postSingleLine(boolean _countryRegion_RU,
                                  boolean _hasQualityOrder,
                                  boolean _isExciseEnableIN,
                                  boolean _isVATEnableIN,
                                  boolean _isCustomsEnableIN,
                                  boolean _isConfigurationkeyRetailEnabled)
    {
        next postSingleLine(
            _countryRegion_RU,
            _hasQualityOrder,
            _isExciseEnableIN,
            _isVATEnableIN,
            _isCustomsEnableIN,
            _isConfigurationkeyRetailEnabled);

        if (this.mustCreateInventoryAdjustment())
        {
            this.createInventBlocking();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>